// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open TexParsing

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | RIGHT_BRACK
  | LEFT_BRACK
  | RIGHT_BRACE
  | LEFT_BRACE
  | HASH
  | PARAGRAPH
  | SPACE
  | MATH of (string)
  | COMMAND of (string)
  | WORD of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_RIGHT_BRACK
    | TOKEN_LEFT_BRACK
    | TOKEN_RIGHT_BRACE
    | TOKEN_LEFT_BRACE
    | TOKEN_HASH
    | TOKEN_PARAGRAPH
    | TOKEN_SPACE
    | TOKEN_MATH
    | TOKEN_COMMAND
    | TOKEN_WORD
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_arg
    | NONTERM_args
    | NONTERM_block
    | NONTERM_blocks
    | NONTERM_rev_blocks

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | RIGHT_BRACK  -> 1 
  | LEFT_BRACK  -> 2 
  | RIGHT_BRACE  -> 3 
  | LEFT_BRACE  -> 4 
  | HASH  -> 5 
  | PARAGRAPH  -> 6 
  | SPACE  -> 7 
  | MATH _ -> 8 
  | COMMAND _ -> 9 
  | WORD _ -> 10 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_RIGHT_BRACK 
  | 2 -> TOKEN_LEFT_BRACK 
  | 3 -> TOKEN_RIGHT_BRACE 
  | 4 -> TOKEN_LEFT_BRACE 
  | 5 -> TOKEN_HASH 
  | 6 -> TOKEN_PARAGRAPH 
  | 7 -> TOKEN_SPACE 
  | 8 -> TOKEN_MATH 
  | 9 -> TOKEN_COMMAND 
  | 10 -> TOKEN_WORD 
  | 13 -> TOKEN_end_of_input
  | 11 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_prog 
    | 3 -> NONTERM_prog 
    | 4 -> NONTERM_arg 
    | 5 -> NONTERM_args 
    | 6 -> NONTERM_args 
    | 7 -> NONTERM_block 
    | 8 -> NONTERM_block 
    | 9 -> NONTERM_block 
    | 10 -> NONTERM_block 
    | 11 -> NONTERM_blocks 
    | 12 -> NONTERM_blocks 
    | 13 -> NONTERM_rev_blocks 
    | 14 -> NONTERM_rev_blocks 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 13 
let _fsyacc_tagOfErrorTerminal = 11

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | RIGHT_BRACK  -> "RIGHT_BRACK" 
  | LEFT_BRACK  -> "LEFT_BRACK" 
  | RIGHT_BRACE  -> "RIGHT_BRACE" 
  | LEFT_BRACE  -> "LEFT_BRACE" 
  | HASH  -> "HASH" 
  | PARAGRAPH  -> "PARAGRAPH" 
  | SPACE  -> "SPACE" 
  | MATH _ -> "MATH" 
  | COMMAND _ -> "COMMAND" 
  | WORD _ -> "WORD" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | RIGHT_BRACK  -> (null : System.Object) 
  | LEFT_BRACK  -> (null : System.Object) 
  | RIGHT_BRACE  -> (null : System.Object) 
  | LEFT_BRACE  -> (null : System.Object) 
  | HASH  -> (null : System.Object) 
  | PARAGRAPH  -> (null : System.Object) 
  | SPACE  -> (null : System.Object) 
  | MATH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMAND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WORD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 9us; 10us; 13us; 8us; 1us; 65535us; 13us; 9us; 3us; 65535us; 0us; 15us; 5us; 15us; 14us; 16us; 2us; 65535us; 0us; 4us; 5us; 6us; 2us; 65535us; 0us; 14us; 5us; 14us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 10us; 14us; 17us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 5us; 2us; 6us; 9us; 1us; 6us; 1us; 7us; 1us; 8us; 2us; 9us; 10us; 2us; 12us; 14us; 1us; 13us; 1us; 14us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 21us; 23us; 25us; 27us; 30us; 33us; 35us; |]
let _fsyacc_action_rows = 17
let _fsyacc_actionTableElements = [|4us; 16395us; 0us; 3us; 6us; 11us; 9us; 13us; 10us; 12us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 3us; 16395us; 6us; 11us; 9us; 13us; 10us; 12us; 1us; 32768us; 3us; 7us; 0us; 16388us; 0us; 16389us; 1us; 16393us; 4us; 5us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 1us; 16394us; 4us; 5us; 3us; 16396us; 6us; 11us; 9us; 13us; 10us; 12us; 0us; 16397us; 0us; 16398us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 7us; 8us; 9us; 13us; 15us; 16us; 17us; 19us; 20us; 21us; 22us; 24us; 28us; 29us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 3us; 1us; 2us; 1us; 1us; 2us; 1us; 0us; 1us; 1us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 16387us; 65535us; 65535us; 16388us; 16389us; 65535us; 16390us; 16391us; 16392us; 65535us; 65535us; 16397us; 16398us; |]
let _fsyacc_reductions ()  =    [| 
# 146 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> TexBlock in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 155 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_prog in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "Parser.fsy"
                                   _1 
                   )
# 22 "Parser.fsy"
                 : TexBlock));
# 166 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Parser.fsy"
                               TexBlock.Empty 
                   )
# 25 "Parser.fsy"
                 : 'gentype_prog));
# 176 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_blocks in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "Parser.fsy"
                                  TexBlock.Items _1 
                   )
# 26 "Parser.fsy"
                 : 'gentype_prog));
# 187 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_blocks in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "Parser.fsy"
                                                          _2 
                   )
# 28 "Parser.fsy"
                 : 'gentype_arg));
# 198 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_arg in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                              [_1] 
                   )
# 30 "Parser.fsy"
                 : 'gentype_args));
# 209 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_args in
            let _2 = parseState.GetInput(2) :?> 'gentype_arg in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                   _2::_1 
                   )
# 31 "Parser.fsy"
                 : 'gentype_args));
# 221 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                    TexBlock.Break 
                   )
# 34 "Parser.fsy"
                 : 'gentype_block));
# 231 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                               TexBlock.Text _1 
                   )
# 35 "Parser.fsy"
                 : 'gentype_block));
# 242 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_args in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                       TexBlock.CommandVariadic (_1, List.rev _2) 
                   )
# 36 "Parser.fsy"
                 : 'gentype_block));
# 254 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                  TexBlock.Command _1 
                   )
# 37 "Parser.fsy"
                 : 'gentype_block));
# 265 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                           [] 
                   )
# 40 "Parser.fsy"
                 : 'gentype_blocks));
# 275 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_rev_blocks in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                      List.rev _1 
                   )
# 41 "Parser.fsy"
                 : 'gentype_blocks));
# 286 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                 [_1] 
                   )
# 44 "Parser.fsy"
                 : 'gentype_rev_blocks));
# 297 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_rev_blocks in
            let _2 = parseState.GetInput(2) :?> 'gentype_block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                            _2 :: _1 
                   )
# 45 "Parser.fsy"
                 : 'gentype_rev_blocks));
|]
# 310 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 14;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : TexBlock =
    engine lexer lexbuf 0 :?> _
