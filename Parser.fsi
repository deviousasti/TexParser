// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | RIGHT_BRACK
  | LEFT_BRACK
  | RIGHT_BRACE
  | LEFT_BRACE
  | HASH
  | PARAGRAPH
  | SPACE
  | MATH of (string)
  | COMMAND of (string)
  | WORD of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_RIGHT_BRACK
    | TOKEN_LEFT_BRACK
    | TOKEN_RIGHT_BRACE
    | TOKEN_LEFT_BRACE
    | TOKEN_HASH
    | TOKEN_PARAGRAPH
    | TOKEN_SPACE
    | TOKEN_MATH
    | TOKEN_COMMAND
    | TOKEN_WORD
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_arg
    | NONTERM_args
    | NONTERM_block
    | NONTERM_blocks
    | NONTERM_rev_blocks
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (TexBlock) 
